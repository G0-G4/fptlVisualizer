<expression> ::= <composition>
<composition> ::= <concatenation> ("." <concatenation>)*
<concatenation> ::= <term> ("*" <term>)*
<term> ::= <factor> ("->" <factor> "," <factor>)*
<factor> ::= <identifier> | "(" <expression> ")"
<identifier> ::= ([a-z] | [A-Z] | [0-9])+

----
<expression> ::= <or_expression>
<or_expression> ::= <and_expression> ("." <and_expression>)*
<and_expression> ::= <term> ("*" <term>)*
<term> ::= <factor> | <ternary>
<ternary> ::= <expression> "->" <expression> "," <expression>
<factor> ::= <identifier> | "(" <expression> ")"
<identifier> ::= ([a-z] | [A-Z] | [0-9])+

c=(a->c,d)->e,g;

(N * 0).equal -> (0 * 0), ((N * 1).sub * ((rand *rand).f * (N * 1).sub.integrate.a2).add)

(a1 * 0).equal -> 1, ((a1 * 1).sub.Fact * a1).mul